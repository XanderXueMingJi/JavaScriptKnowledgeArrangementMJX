1.HTTP协议的主要特点
    1.简单快速
        每个资源都是固定的（例如图片），直接输入uri（？）获取资源，个人感觉是直捣黄龙
    2.灵活
        在每个HTTP协议中都一个头部分（数据类型），通过一个HTTP协议，就可以完成不同数据类型的传输
    3.无连接
        连接一次，它就会断掉，不会保持连接
    4.无状态
        客户端和服务端是两种（可以认为是两种身份），客户端说向服务端请求一个图片，那么HTTP协议帮你
        建立连接，帮你中间传输，完成后，因为上面说的无连接，那么这次就会断开，下次客户端再请求数据，
        服务端没办法区分上一次连接和这一次连接是不是同一个身份，服务端是没有记住你的状态，也就是说，
        单从HTTP协议上，是不能区分两次连接者的身份

2.HTTP报文的组成部分（建立在TCP应用上）
    请求报文
        请求行
            HTTP方法
            页面地址
            HTTP协议
            版本
        请求头
            key
            value
        空行
            告诉服务端这里不是请求头，下一部分是请求体
        请求体

    响应报文
        状态行
        响应头
        空行
        响应体

3.HTTP方法
    GET  获取资源

    POST  传输资源

    PUT  更新资源

    DELETE 删除资源

    HEAD 获得报文首部

4.POST和GET的区别

5.HTTP状态码

6.什么是持久连接
    定义（前提）：HTTP协议采用“请求-应答”模式，当使用普通模式，即非Keep-Alive（持久连接的意思）模式时，每个请求/应答客户
    和服务器都有新建一个连接，完成之后立即断开连接（HTTP协议为无连接的协议）

    当使用Keep-Alive模式（又称持久连接、连接重用）时，Keep-Alive功能使客户端到服务器端的
    连接持续有效，当出现对服务器的后续请求时，Keep-Alive功能避免了建立或者重新建立连接

    大白话：问你了不了解持久连接时候，你说HTTP是支持持久连接的，但是1.1版本支持，1.0则不支持

7.什么是管线化
    在使用持久连接的情况下，某个连接上消息的传递类似于：
    请求1 -》响应1-》请求2-》响应2-》请求3-》响应3

    某个连接上的消息变成类似这样：   //把我所有请求一次打包发给服务端，它也一次性将响应打包响应回来
    请求1 -》请求2 -》请求3 -》响应1-》响应2-》响应3

    注意！
    管线化机制是通过持久连接完成的，同样的（至少）1.1版本支持，1.0则不支持
    只有GET和HEAD请求可以进行管线化，而POST则有所限制
    第一次与后台服务器端创建连接时不应该启动管线化机制，因为对方（服务器）不一定支持HTTP/1.1版本的协议
    管线化机制不会带来大幅度的性能提升，很多服务器端和代理程序对其支持也并不好


























